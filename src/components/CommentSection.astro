---
// src/components/CommentSection.astro
// The Comment interface is globally available from src/types/env.d.ts
let comments: Comment[] = [];
let errorMessage = '';

try {
  const response = await fetch('/comments.json');
  if (response.ok) {
    // Assume the json is an array of Comment objects.
    // Add type assertion for stronger type checking.
    const data = await response.json() as Comment[]; 
    if (Array.isArray(data)) {
      // Further check if elements are actual comments if necessary, for now, trust the source or structure.
      // A more robust check might involve validating each object in the array.
      comments = data;
    } else {
      console.error("Error: comments.json is not an array or is malformed.");
      errorMessage = 'Error loading comments. Data format incorrect.';
      comments = []; // Ensure comments is Comment[]
    }
  } else {
    if (response.status === 404) {
      // comments.json doesn't exist, treat as no comments yet.
      comments = []; 
    } else {
      console.error(`Error fetching comments: ${response.status} ${response.statusText}`);
      errorMessage = 'Error loading comments.';
      comments = []; // Ensure comments is Comment[]
    }
  }
} catch (error) {
  console.error('Failed to fetch or parse comments.json:', error);
  errorMessage = 'Could not load comments at this time.';
  comments = []; // Ensure comments is Comment[] in case of any error
}
---

<div class="comment-section">
  <h3>Leave a Comment</h3>
  <form method="POST">
    <div>
      <label for="name">Name:</label>
      <input type="text" id="name" name="name" required />
    </div>
    <div>
      <label for="comment">Comment:</label>
      <textarea id="comment" name="comment" rows="4" required></textarea>
    </div>
    <button type="submit">Submit Comment</button>
  </form>

  <h3>Comments</h3>
  {errorMessage && <p class="error-message">{errorMessage}</p>}
  {comments.length === 0 && !errorMessage ? (
    <p>No comments yet.</p>
  ) : (
    <ul>
      {comments.map((comment: Comment) => ( // Explicitly type comment in map for clarity
        <li>
          <div class="comment-header">
            <strong>{comment.author}</strong>
            {/* Ensure timestamp is treated as a string before passing to new Date() */}
            {comment.timestamp && <span class="comment-timestamp">{new Date(String(comment.timestamp)).toLocaleString()}</span>}
          </div>
          <p class="comment-text">{comment.text}</p>
        </li>
      ))}
    </ul>
  )}
</div>

<style>
  /* All styles will be moved to global.css */
</style>
